//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: interface.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Liveq_LiveQClient, then call methods of this protocol to make API calls.
internal protocol Liveq_LiveQClientProtocol {
  func createRoom(_ request: Liveq_CreateRequest, callOptions: CallOptions?) -> UnaryCall<Liveq_CreateRequest, Liveq_CreateReply>
  func joinRoom(_ request: Liveq_KeyRequest, callOptions: CallOptions?) -> UnaryCall<Liveq_KeyRequest, Liveq_JoinReply>
  func deleteRoom(_ request: Liveq_KeyRequest, callOptions: CallOptions?) -> UnaryCall<Liveq_KeyRequest, Liveq_Status>
  func leaveRoom(_ request: Liveq_LeaveRequest, callOptions: CallOptions?) -> UnaryCall<Liveq_LeaveRequest, Liveq_Status>
  func addService(_ request: Liveq_ServiceRequest, callOptions: CallOptions?) -> UnaryCall<Liveq_ServiceRequest, Liveq_Status>
  func getServices(_ request: Liveq_KeyRequest, callOptions: CallOptions?, handler: @escaping (Liveq_ServiceMsg) -> Void) -> ServerStreamingCall<Liveq_KeyRequest, Liveq_ServiceMsg>
  func getQueue(_ request: Liveq_KeyRequest, callOptions: CallOptions?, handler: @escaping (Liveq_SongMsg) -> Void) -> ServerStreamingCall<Liveq_KeyRequest, Liveq_SongMsg>
  func addSong(_ request: Liveq_SongRequest, callOptions: CallOptions?) -> UnaryCall<Liveq_SongRequest, Liveq_Status>
  func deleteSong(_ request: Liveq_SongRequest, callOptions: CallOptions?) -> UnaryCall<Liveq_SongRequest, Liveq_Status>
}

internal final class Liveq_LiveQClient: GRPCClient, Liveq_LiveQClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the liveq.LiveQ service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Unary call to CreateRoom
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateRoom.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createRoom(_ request: Liveq_CreateRequest, callOptions: CallOptions? = nil) -> UnaryCall<Liveq_CreateRequest, Liveq_CreateReply> {
    return self.makeUnaryCall(path: "/liveq.LiveQ/CreateRoom",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to JoinRoom
  ///
  /// - Parameters:
  ///   - request: Request to send to JoinRoom.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func joinRoom(_ request: Liveq_KeyRequest, callOptions: CallOptions? = nil) -> UnaryCall<Liveq_KeyRequest, Liveq_JoinReply> {
    return self.makeUnaryCall(path: "/liveq.LiveQ/JoinRoom",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to DeleteRoom
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteRoom.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteRoom(_ request: Liveq_KeyRequest, callOptions: CallOptions? = nil) -> UnaryCall<Liveq_KeyRequest, Liveq_Status> {
    return self.makeUnaryCall(path: "/liveq.LiveQ/DeleteRoom",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to LeaveRoom
  ///
  /// - Parameters:
  ///   - request: Request to send to LeaveRoom.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func leaveRoom(_ request: Liveq_LeaveRequest, callOptions: CallOptions? = nil) -> UnaryCall<Liveq_LeaveRequest, Liveq_Status> {
    return self.makeUnaryCall(path: "/liveq.LiveQ/LeaveRoom",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to AddService
  ///
  /// - Parameters:
  ///   - request: Request to send to AddService.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addService(_ request: Liveq_ServiceRequest, callOptions: CallOptions? = nil) -> UnaryCall<Liveq_ServiceRequest, Liveq_Status> {
    return self.makeUnaryCall(path: "/liveq.LiveQ/AddService",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Server streaming call to GetServices
  ///
  /// - Parameters:
  ///   - request: Request to send to GetServices.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getServices(_ request: Liveq_KeyRequest, callOptions: CallOptions? = nil, handler: @escaping (Liveq_ServiceMsg) -> Void) -> ServerStreamingCall<Liveq_KeyRequest, Liveq_ServiceMsg> {
    return self.makeServerStreamingCall(path: "/liveq.LiveQ/GetServices",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Server streaming call to GetQueue
  ///
  /// - Parameters:
  ///   - request: Request to send to GetQueue.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func getQueue(_ request: Liveq_KeyRequest, callOptions: CallOptions? = nil, handler: @escaping (Liveq_SongMsg) -> Void) -> ServerStreamingCall<Liveq_KeyRequest, Liveq_SongMsg> {
    return self.makeServerStreamingCall(path: "/liveq.LiveQ/GetQueue",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Unary call to AddSong
  ///
  /// - Parameters:
  ///   - request: Request to send to AddSong.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addSong(_ request: Liveq_SongRequest, callOptions: CallOptions? = nil) -> UnaryCall<Liveq_SongRequest, Liveq_Status> {
    return self.makeUnaryCall(path: "/liveq.LiveQ/AddSong",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Unary call to DeleteSong
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSong.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteSong(_ request: Liveq_SongRequest, callOptions: CallOptions? = nil) -> UnaryCall<Liveq_SongRequest, Liveq_Status> {
    return self.makeUnaryCall(path: "/liveq.LiveQ/DeleteSong",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Liveq_LiveQProvider: CallHandlerProvider {
  func createRoom(request: Liveq_CreateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Liveq_CreateReply>
  func joinRoom(request: Liveq_KeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Liveq_JoinReply>
  func deleteRoom(request: Liveq_KeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Liveq_Status>
  func leaveRoom(request: Liveq_LeaveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Liveq_Status>
  func addService(request: Liveq_ServiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Liveq_Status>
  func getServices(request: Liveq_KeyRequest, context: StreamingResponseCallContext<Liveq_ServiceMsg>) -> EventLoopFuture<GRPCStatus>
  func getQueue(request: Liveq_KeyRequest, context: StreamingResponseCallContext<Liveq_SongMsg>) -> EventLoopFuture<GRPCStatus>
  func addSong(request: Liveq_SongRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Liveq_Status>
  func deleteSong(request: Liveq_SongRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Liveq_Status>
}

extension Liveq_LiveQProvider {
  internal var serviceName: String { return "liveq.LiveQ" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "CreateRoom":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createRoom(request: request, context: context)
        }
      }

    case "JoinRoom":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.joinRoom(request: request, context: context)
        }
      }

    case "DeleteRoom":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteRoom(request: request, context: context)
        }
      }

    case "LeaveRoom":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.leaveRoom(request: request, context: context)
        }
      }

    case "AddService":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.addService(request: request, context: context)
        }
      }

    case "GetServices":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getServices(request: request, context: context)
        }
      }

    case "GetQueue":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getQueue(request: request, context: context)
        }
      }

    case "AddSong":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.addSong(request: request, context: context)
        }
      }

    case "DeleteSong":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteSong(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload` for request and response messages
extension Liveq_CreateRequest: GRPCProtobufPayload {}
extension Liveq_CreateReply: GRPCProtobufPayload {}
extension Liveq_KeyRequest: GRPCProtobufPayload {}
extension Liveq_JoinReply: GRPCProtobufPayload {}
extension Liveq_Status: GRPCProtobufPayload {}
extension Liveq_LeaveRequest: GRPCProtobufPayload {}
extension Liveq_ServiceRequest: GRPCProtobufPayload {}
extension Liveq_ServiceMsg: GRPCProtobufPayload {}
extension Liveq_SongMsg: GRPCProtobufPayload {}
extension Liveq_SongRequest: GRPCProtobufPayload {}

